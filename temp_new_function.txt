  const handleCurrentLocationClick = async () => {
    if (!navigator.geolocation) {
      alert("Geolocation is not supported by this browser.");
      return;
    }

    setIsFetchingLocation(true);
    
    navigator.geolocation.getCurrentPosition(
      async (position) => {
        try {
          const { latitude, longitude } = position.coords;
          
          // Use coordinates to get the city name from WeatherAPI
          const response = await fetch(
            `https://api.weatherapi.com/v1/current.json?key=${API_KEY}&q=${latitude},${longitude}&aqi=no`
          );
          
          if (response.ok) {
            const data: CurrentWeather = await response.json();
            
            // Update the selected location with the detected city
            const newLocation = {
              name: data.location.name,
              region: data.location.region,
              country: data.location.country,
              lat: latitude,
              lon: longitude
            };
            
            setSelectedLocation(newLocation);
            setCurrentTemp(Math.round(data.current.temp_c));
            setSearchQuery(`${data.location.name}, ${data.location.region}`);
          } else {
            console.error('Failed to fetch location data:', response.statusText);
            alert('Failed to get location information. Please try again.');
          }
        } catch (error) {
          console.error('Error fetching location data:', error);
          alert('Failed to get location information. Please try again.');
        } finally {
          setIsFetchingLocation(false);
        }
      },
      (error) => {
        console.error('Geolocation error:', error);
        setIsFetchingLocation(false);
        
        switch (error.code) {
          case error.PERMISSION_DENIED:
            alert('Location access denied. Please enable location permissions in your browser.');
            break;
          case error.POSITION_UNAVAILABLE:
            alert('Location information is unavailable.');
            break;
          case error.TIMEOUT:
            alert('Location request timed out.');
            break;
          default:
            alert('An error occurred while getting your location.');
        }
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 0
      }
    );
  };